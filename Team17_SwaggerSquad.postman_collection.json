{
	"info": {
		"_postman_id": "9e11b4cf-95fc-4b0e-81db-981287abf969",
		"name": "Team17_SwaggerSquad",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33413576",
		"_collection_link": "https://galactic-crescent-9246.postman.co/workspace/Team17-Swagger-Squad~f9528e48-a396-451f-97de-9b6ccfe7d1dd/collection/33413576-9e11b4cf-95fc-4b0e-81db-981287abf969?action=share&source=collection_link&creator=33413576"
	},
	"item": [
		{
			"name": "Data Driven",
			"item": [
				{
					"name": "User Login Controller",
					"item": [
						{
							"name": "User Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//To get response body -> \"token\" value\r",
											"bodyData = pm.response.json();\r",
											"\r",
											"token_value = bodyData.token;\r",
											"\r",
											"//To check in the console\r",
											"console.log(\"Token: \" + token_value);\r",
											"\r",
											"//Setting token as global variable to use in collections\r",
											"pm.globals.set(\"TokenValue\", token_value);\r",
											"\r",
											"//data validation\r",
											"pm.test('Verified user signed in ', () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.token).to.eql(pm.globals.get('TokenValue'));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// pm.test('Validating Header', function () {\r",
											"//     pm.response.to.have.header('Content-Type');\r",
											"// });\r",
											"\r",
											"// pm.test('Response time is less than 500ms', function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"// });\r",
											"\r",
											"//Schema validation\r",
											"const schema = {\r",
											"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"token\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"roles\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"token\",\r",
											"    \"type\",\r",
											"    \"userId\",\r",
											"    \"email\",\r",
											"    \"roles\",\r",
											"    \"status\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{Password}}\",\r\n  \"userLoginEmailId\": \"{{UserLoginEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Program Controller",
					"item": [
						{
							"name": "Create Program with positive and negative scenario(DDT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfull Post Request\",()=>{\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,200,400,401,500]);\r",
											"    const jsonData=pm.response.json();\r",
											"    if(pm.response.code == 200){\r",
											"        pm.globals.set(\"ProgramId\",jsonData.programId);\r",
											"    }\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var teamname = \"SwaggerSquad\";\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"\r",
											"var program_name_in = \"SDETs\"\r",
											"pm.collectionVariables.set(\"programNameIn\",program_name_in);\r",
											"\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"\r",
											"//March24-TeamName-ProgramName-serialnumber\r",
											"const program_name = \"Mar24-\" + pm.collectionVariables.get(\"teamname\") + \"-\" + pm.collectionVariables.get(\"programNameIn\") + \"-\" + pm.collectionVariables.get(\"serialnumber\");\r",
											"\r",
											"pm.collectionVariables.set(\"ProgramName\",program_name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programDescription\": \"{{programDescription}}\",\n    \"programName\": \"{{programName}}\",\n    \"programStatus\":\"{{programStatus}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all Programs details with valid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"    if(!pm.globals.get(\"ProgramId\")){\r",
											"        const progName = pm.iterationData.get(\"programName\");\r",
											"        pm.response.json().forEach(obj => {\r",
											"            if(obj.programName == progName){\r",
											"                pm.globals.set(\"ProgramId\",obj.programId); \r",
											"            }  \r",
											"\r",
											"        });\r",
											"    }\r",
											"    // if(pm.globals.get(\"ProgramId\")==null){\r",
											"    //     pm.globals.set(\"ProgramId\",pm.response.json()[0].programId);\r",
											"    // }\r",
											"});\r",
											"\r",
											"//postman.setNextRequest(\"GET all Programs details with Users\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/allPrograms",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"allPrograms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all Programs details with Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response time is less than 500ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//postman.setNextRequest(\"GET Program by valid Program-Id\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/allProgramsWithUsers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Program by valid Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//postman.setNextRequest(\"GET Program by valid Program name\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// pm.globals.set(\"program_id\", \"16820\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/programs/{{ProgramId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"programs",
										"{{ProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate datatype,JSON field and Schema in response body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test('Status code is 200', function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// })\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Test data type in response body', () => {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData.programId).to.be.a('number');\r",
											"    pm.expect(jsonData.programName).to.be.a('string');\r",
											"    pm.expect(jsonData.programDescription).to.be.a('string');\r",
											"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
											"})\r",
											"\r",
											"\r",
											"pm.test('schema is valid',function(){\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"programId\": { \"type\": \"number\" },\r",
											"            \"programName\": { \"type\": \"string\" },\r",
											"            \"programDescription\": { \"type\": \"string\" },\r",
											"            \"programStatus\": { \"type\": \"string\" },\r",
											"            \"creationTime\": { \"type\": \"string\" },\r",
											"            \"lastModTime\": { \"type\": \"string\" }\r",
											"        },\r",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
											"    };\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/programs/{{ProgramId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"programs",
										"{{ProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program with valid Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 401\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"// });\r",
											"\r",
											"// pm.test(\"response matches string\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"// });\r",
											"\r",
											"postman.setNextRequest(\"Create New Batch\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"{{programDescription}}\",\r\n    \"programName\": \"{{ProgramName}}\",\r\n    \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/putprogram/{{ProgramId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"putprogram",
										"{{ProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 401\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"// });\r",
											"\r",
											"// pm.test(\"response matches string\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"// });\r",
											"//postman.setNextRequest(\"Delete Program with valid Program-Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{ProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/program/{{ProgramName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"program",
										"{{ProgramName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Program Batch Controller",
					"item": [
						{
							"name": "Create New Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Taking batchId value from response body\r",
											"batchData = pm.response.json();\r",
											"batchId_value = batchData.batchId;\r",
											"console.log(\"BatchId:\"+batchId_value);\r",
											"\r",
											"//Setting BatchId as global variable to use in collections\r",
											"if(batchId_value){\r",
											"    pm.globals.set(\"BatchId\",batchId_value);\r",
											"}\r",
											"\r",
											"const response = pm.response.json();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"if (statuscode==400 ||statuscode==401 ) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,401,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([201,202]);\r",
											"    });\r",
											"\r",
											"    //data validation\r",
											"pm.test('Verified batch id is created ', () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.batchId).to.eql(pm.globals.get('BatchId'));\r",
											"});\r",
											"\r",
											"pm.test('Validating Header', function () {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"});\r",
											"\r",
											"//Schema validation\r",
											"const schema = \r",
											"    {\r",
											" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"};\r",
											"pm.test(\"Response contains valid JSON data\", () => {\r",
											"     pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"};\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"GET All Batches\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var batch = \"SDET132\";\r",
											"pm.collectionVariables.set(\"Batch\",batch);\r",
											"\r",
											"// March24-TeamName-ProgramName-BatchName-serialnumber \r",
											"// Ex: March24-EliteForce-SDET-SDET01-001\r",
											"\r",
											"// Here program name is given as programNameIn\r",
											"batchName = \"March24-\"+pm.collectionVariables.get(\"teamname\")+\"-\"+pm.collectionVariables.get(\"programNameIn\")+\"-\"+pm.collectionVariables.get(\"Batch\")+\"-\"+pm.collectionVariables.get(\"serialnumber\");\r",
											"\r",
											"pm.collectionVariables.set(\"BatchName\",batchName);\r",
											"\r",
											"var batchDescription = \"SDET Testing Class\";\r",
											"pm.collectionVariables.set(\"batch_desc\",batchDescription);\r",
											"\r",
											"var batchNoOfClasses = 8;\r",
											"pm.collectionVariables.set(\"Batch_NOofClasses\",batchNoOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}}\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(!pm.globals.get(\"BatchId\")){\r",
											"        const batchName = pm.iterationData.get(\"batchName\");\r",
											"        const progId = pm.globals.get(\"ProgramId\");\r",
											"        pm.response.json().forEach(obj =>{\r",
											"            if(obj.batchName == batchName && obj.programId == progId){\r",
											"                pm.globals.set(\"BatchId\",obj.batchId);\r",
											"            }\r",
											"\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET Batch by BatchId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch by BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET Batch by BatchName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchId/{{BatchId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"{{BatchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch by BatchName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"GET Batch by ProgramId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchName/DA01",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"DA01"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Batch by ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Update by Batch Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/program/{{ProgramId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"program",
										"{{ProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"const response = pm.response.json();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([201,200]);\r",
											"    });\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.iterationData.set(\"batchNoOfClasses\",parseInt(pm.iterationData.get(\"batchNoOfClasses\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{BatchId}},\r\n  \"batchName\": \"{{BatchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}},\r\n  \"programName\":\"{{ProgramName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/{{BatchId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"{{BatchId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Controller",
					"item": [
						{
							"name": "Post create user with role(Data Driven) positive and negative scenarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get json from response\r",
											"pm.collectionVariables.get(\"variable_key\");\r",
											"pm.collectionVariables.get(\"variable_key\");\r",
											"const response = pm.response.json();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([201,202]);\r",
											"    });\r",
											"};\r",
											"if(statuscode == 200){\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.globals.set(\"createduserId\",jsonData.userId);\r",
											"    const userId = jsonData.userId;\r",
											"    console.log(userId);\r",
											"}\r",
											"\r",
											"\r",
											"const reqjason = JSON.parse(pm.request.body.raw);\r",
											"pm.globals.set(reqjason.roleId);\r",
											"pm.globals.set(reqjason.userRoleStatus);\r",
											"\r",
											"postman.setNextRequest(\"Get Active User\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"// var teamname = \"SwaggerSquad\";\r",
											"// const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"// pm.collectionVariables.set(\"teamname\",teamname);\r",
											"// pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"pm.collectionVariables.set(\"FirstName\",pm.collectionVariables.get(\"teamname\")+ - +pm.collectionVariables.get(\"serialnumber\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userPhoneNumber\": {{phonenumber}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Get All Users\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/activeUsers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"activeUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"if(!pm.globals.get(\"createduserId\")){\r",
											"    const loginEmail = pm.iterationData.get(\"userLoginEmail\");\r",
											"    pm.response.json().forEach(obj =>{\r",
											"        if(loginEmail == obj.loginEmail){\r",
											"            pm.globals.set(\"createduserId\",obj.userId);\r",
											"        }\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"Get All Roles\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Get User information by UserId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/roles",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User information by UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Get all Users with roles\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Users with roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Gets count of active and inactive users\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/roles",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets count of active and inactive users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Gets User by Program Batches with batchId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/byStatus",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"byStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets User by Program Batches with batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Gets Users for Program by programId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programBatch/8448",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"8448"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets Users for Program by programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Gets Users by roleId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programs/16213",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programs",
										"16213"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets Users by roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Gets Users by roleId V2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"ROLE_ID\", pm.iterationData.get(\"Role-Id\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/roles/{{ROLE_ID}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roles",
										"{{ROLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gets Users by roleId V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is OK\", () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Put Update User\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/v2/users",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Update User Role Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											"\r",
											"//postman.setNextRequest(\"PUT Update User RoleID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"{{Role-Id}}\",\r\n  \"userRoleStatus\": \"{{Role-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Update User RoleID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											"\r",
											"postman.setNextRequest(\"PUT-Assign Update user role program batch status\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleList\": [\r\n    \"R03\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleId/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT-Assign Update user role program batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											"\r",
											"postman.setNextRequest(\"All Users\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programId\":{{ProgramId}},\r\n  \"roleId\": \"R03\",\r\n//   \"userId\": \"U2326\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{BatchId}},\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleProgramBatchStatus/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Update User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==404) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											"\r",
											"postman.setNextRequest(\"PUT Update User Role Status\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Role Program Batch Map Controller",
					"item": [
						{
							"name": "All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"   //if(pm.response.json().length >0){\r",
											"        pm.collectionVariables.set(\"UserId\",pm.response.json()[0].userId);\r",
											"   // }\r",
											"});\r",
											"\r",
											"pm.test(\"status line is OK\",()=>{\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schema Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema={\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Schema Validation\",()=>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap"
									]
								}
							},
							"response": []
						},
						{
							"name": "Data validation[Not Null/Empty]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body data validation\",()=>{\r",
											"    pm.response.json().forEach(obj =>{\r",
											"       // NULL Validation\r",
											"        pm.expect(obj.userId).is.not.null;\r",
											"        pm.expect(obj.roleId).is.not.null;\r",
											"        pm.expect(obj.programId).is.not.null;\r",
											"        pm.expect(obj.batchId).is.not.null;\r",
											"        pm.expect(obj.userRoleProgramBatchStatus).is.not.null;\r",
											"\r",
											"        //Empty validation\r",
											"        pm.expect(obj.userId).is.not.empty;\r",
											"        pm.expect(obj.roleId).is.not.empty;\r",
											"        pm.expect(obj.programId).is.not.eq(0);\r",
											"        pm.expect(obj.batchId).is.not.eq(0);\r",
											"        pm.expect(obj.userRoleProgramBatchStatus).is.not.empty;\r",
											"        \r",
											"    }\r",
											"    \r",
											"    )\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var userId = \"U2824\";\r",
											"//pm.collectionVariables.set(\"UserId\",\"U727\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status OK\", ()=> {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "By UserId-Schema Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema={\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"userId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"roleId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"programId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"userRoleProgramBatchStatus\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"userId\",\r",
											"        \"roleId\",\r",
											"        \"programId\",\r",
											"        \"batchId\",\r",
											"        \"userRoleProgramBatchStatus\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Schema Validation\",()=>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "By UserId-Data validation[Not Null/Empty]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body data validation\",()=>{\r",
											"    let jsonData = pm.response.json();\r",
											"    if(jsonData && jsonData.length >0){\r",
											"    pm.response.json().forEach(obj =>{\r",
											"       // NULL Validation\r",
											"        pm.expect(obj.userId).is.not.null;\r",
											"        pm.expect(obj.roleId).is.not.null;\r",
											"        pm.expect(obj.programId).is.not.null;\r",
											"        pm.expect(obj.batchId).is.not.null;\r",
											"        pm.expect(obj.userRoleProgramBatchStatus).is.not.null;\r",
											"\r",
											"        //Empty validation\r",
											"        pm.expect(obj.userId).is.not.empty;\r",
											"        pm.expect(obj.roleId).is.not.empty;\r",
											"        pm.expect(obj.programId).is.not.eq(0);\r",
											"        pm.expect(obj.batchId).is.not.eq(0);\r",
											"        pm.expect(obj.userRoleProgramBatchStatus).is.not.empty;\r",
											"        \r",
											"    }\r",
											"    \r",
											"    );\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"{{UserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete Program with valid Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// pm.test(\"response matches string\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"// });\r",
											"\r",
											"//postman.setNextRequest(\"Delete Program by ProgramName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/deletebyprogid/{{ProgramId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"deletebyprogid",
										"{{ProgramId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program by ProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//postman.setNextRequest(\"null\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/deletebyprogname/{{ProgramName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"deletebyprogname",
										"{{ProgramName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch by BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											"\r",
											"//postman.setNextRequest(\"NE-Create New Batch with invalid url\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/batches/{batchId}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"{batchId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schema & Data validation for valid UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", ()=> {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status OK\", ()=> {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"const schema={\r",
											"   \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test(\"Schema Validation\",()=>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Success Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.message).to.eql(\"Deleted All Programs/Batches assigned to User ID\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/deleteAll/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"deleteAll",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User info by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Checking Negative Scenarios",
			"item": [
				{
					"name": "User Login Controller",
					"item": [
						{
							"name": "NE-Invalid Userid & Valid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Unauthorized\", function () {\r",
											"    pm.response.to.be.unauthorized;\r",
											"});\r",
											"\r",
											"pm.test(\"Bad Credentials\", ()=> {\r",
											"    const errorMsg = pm.response.json();\r",
											"    pm.expect(errorMsg.message).to.eql(\"Bad credentials\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"abcd@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Valid Userid & Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Unauthorized\", function () {\r",
											"    pm.response.to.be.unauthorized;\r",
											"});\r",
											"\r",
											"pm.test(\"Bad Credentials\", ()=> {\r",
											"    const errorMsg = pm.response.json();\r",
											"    pm.expect(errorMsg.message).to.eql(\"Bad credentials\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid Userid & Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Unauthorized\", function () {\r",
											"    pm.response.to.be.unauthorized;\r",
											"});\r",
											"\r",
											"pm.test(\"Bad Credentials\", ()=> {\r",
											"    const errorMsg = pm.response.json();\r",
											"    pm.expect(errorMsg.message).to.eql(\"Bad credentials\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja\",\r\n  \"userLoginEmailId\": \"sdet@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Without Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Unauthorized\", () =>{\r",
											"    pm.response.to.be.unauthorized;\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized Error\", ()=> {\r",
											"    const errorMsg = pm.response.json();\r",
											"    pm.expect(errorMsg.error).to.eql(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}",
									"host": [
										"{{baseurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Unauthorized\", () =>{\r",
											"    pm.response.to.be.unauthorized;\r",
											"});\r",
											"\r",
											"pm.test(\"Unauthorized Error\", ()=> {\r",
											"    const errorMsg = pm.response.json();\r",
											"    pm.expect(errorMsg.error).to.eql(\"Unauthorized\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login456",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login456"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Empty Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Bad Request\", function () {\r",
											"    pm.response.to.be.badRequest;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"\",\r\n  \"userLoginEmailId\": \"\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid BaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/login",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Not Found\", ()=> {\r",
											"    pm.response.to.be.notFound;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutlm",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutlm"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Without Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Not Found\", ()=> {\r",
											"    pm.response.to.be.notFound;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}",
									"host": [
										"{{baseurl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Program Controller",
					"item": [
						{
							"name": "NE-Create Program Without Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"rocker techniques\",\r\n  \"programName\": \"march7-rockers-sdet-081\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with already existing program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cannot create program , since already exists\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 500ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"Java-Program\",\r\n  \"programName\": \"Java-Program\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 300ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"//);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"string\",\r\n  \"programName\": \"march7-rockers-sdet-081\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogramee",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogramee"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with invalid URL and valid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"Development Training \",\r\n  \"programName\": \"march7-rockers-sdet-0381\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/saveprogramee",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"saveprogramee"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with integer value in endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"string\",\r\n  \"programName\": \"march7-rockers-sdet-081\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram1"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with no value in program description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"programDescription must begin with alphabet and can contain only alphanumeric characters\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 300\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"Dec7-rockers-sdet-081\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with no value in programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 300\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"String\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with no value in programStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Status: must be Active or Inactive\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 300\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"rockers game\",\r\n  \"programName\": \"Dec7-rockers-sdet-081\",\r\n  \"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with no values in field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"\",\r\n    \"programName\": \"\",\r\n    \"programStatus\":\"\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with already existing programDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 500ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"// });\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cannot create program , since already exists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Java-Program\",\r\n  \"programName\": \"march7-rockers-sdet-0091\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Create Program with already existing programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"cannot create program , since already exists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Java-Program\",\r\n  \"programName\": \"march7-rockers-sdet-0091\",\r\n  \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/saveprogram",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET all Programs details with Invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 200ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/allProgramss",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"allProgramss"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET all Programs details with Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// pm.test(\"Response time is less than 200ms\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/allProgramss",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"allProgramss"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Program by invalid Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 350ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(350);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/programs/7453",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"programs",
										"7453"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Program by Invalid ProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// pm.globals.set(\"program_id\", \"16820\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/programs/environment",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"programs",
										"environment"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update Program by Invalid Program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"no list with such program name SpecialTraining\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"string\",\r\n    \"programName\": \"march7-rockers-sdet-081\",\r\n    \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/program/SpecialTraining",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"program",
										"SpecialTraining"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update Program with no value in program name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"programName must begin with alphabet and can contain only alphanumeric characters\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"string\",\r\n    \"programName\": \"\",\r\n    \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/program/programNamefield",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"program",
										"programNamefield"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update Program with no value in programStatus field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"string\",\r\n    \"programName\": \"march7-rockers-sdet-081\",\r\n    \"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/program/{programName}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"program",
										"{programName}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update Program with invalid Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"response matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"string\",\r\n    \"programName\": \"march7-rockers-sdet-081\",\r\n    \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/putprogram/{56741}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"putprogram",
										"{56741}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete Program by non existing Program-Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/deletebyprogid/{x8574}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"deletebyprogid",
										"{x8574}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete Program by non existing ProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/deletebyprogid/March05-scraper-sdet009",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"deletebyprogid",
										"March05-scraper-sdet009"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Program Batch Controller",
					"item": [
						{
							"name": "NE-Create New Batch with invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//postman.setNextRequest(\"NE-GET All Batches without authorization\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var batch = \"SDET132\";\r",
											"pm.collectionVariables.set(\"Batch\",batch);\r",
											"\r",
											"// March24-TeamName-ProgramName-BatchName-serialnumber \r",
											"// Ex: March24-EliteForce-SDET-SDET01-001\r",
											"\r",
											"// Here program name is given as programIn\r",
											"batchName = \"March24-\"+pm.collectionVariables.get(\"teamname\")+\"-\"+pm.collectionVariables.get(\"programIn\")+\"-\"+pm.collectionVariables.get(\"Batch\")+\"-\"+pm.collectionVariables.get(\"serialnumber\");\r",
											"\r",
											"pm.collectionVariables.set(\"BatchName\",batchName);\r",
											"\r",
											"var batchDescription = \"SDET Testing Class\";\r",
											"pm.collectionVariables.set(\"batch_desc\",batchDescription);\r",
											"\r",
											"var batchNoOfClasses = 8;\r",
											"pm.collectionVariables.set(\"Batch_NOofClasses\",batchNoOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}}\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/batches",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET All Batches with invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"//postman.setNextRequest(\"NE-GET Batch by invalid BatchId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/batches",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by invalid BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"//postman.setNextRequest(\"NE-GET Batch by BatchId that is non existing\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchId/9589*",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"9589*"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by BatchId that is non existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"//postman.setNextRequest(\"NE-GET Batch by invalid BatchName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchId/0000",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"0000"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by BatchId as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//ostman.setNextRequest(\"NE-GET Batch by invalid BatchName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchId/\"9589\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"\"9589\""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by BatchId with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchId/9589*",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"9589*"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by invalid BatchName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/batchName/Acorn",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"Acorn"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-GET Batch by invalid ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/batches/program/01010",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"program",
										"01010"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update by Batch Id with invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const batchNameAppend = Math.floor((Math.random()*10000 +1));\r",
											"//pm.globals.set(\"randIntBatch\", batchNameAppend);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{BatchId}},\r\n  \"batchName\": \"{{BatchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}},\r\n  \"programName\":\"{{ProgramName}}\"\r\n}\r\n\r\n//{\r\n//   \"batchDescription\":\"{{batchDescription}}-PUT update\",\r\n//   \"batchId\":{{batchId}},\r\n//   \"batchName\":\"{{batchName}}-PUT update{{randIntBatch}}\",\r\n//   \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n//   \"batchStatus\":4,\r\n//   \"programId\":{{programId}},\r\n//   \"programName\":\"{{programName}}\"\r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/batches/{{BatchId}}",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"batches",
										"{{BatchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete batch with invalid BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/batches/9949",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"9949"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete by BatchId with no batch id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/batches/0000",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"0000"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete by BatchId with non existing batch id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/batches/0000",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"batches",
										"0000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Controller",
					"item": [
						{
							"name": "NE-Post create user with role without body input",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"//pm.collectionVariables.set(\"RoleId\",pm.iterationData.get(\"Role-Id\"));\r",
											"//pm.collectionVariables.set()\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role in invalid url",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"//pm.collectionVariables.set(\"RoleId\",pm.iterationData.get(\"Role-Id\"));\r",
											"//pm.collectionVariables.set()\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userPhoneNumber\": {{phonenumber}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/users/roleStatus",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role in invalid url and empty body input",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/users/roleStatus",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role in invalid url and endpoint and empty body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/use/users/",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"use",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role in invalid url and endpoint and valid body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userPhoneNumber\": {{phonenumber}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/use/users/",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"use",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role in valid url and invalid endpoint and valid body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userPhoneNumber\": {{phonenumber}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/use/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"use",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role with valid Url and endpoint and without unique phonenumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"//pm.collectionVariables.set(\"RoleId\",pm.iterationData.get(\"Role-Id\"));\r",
											"//pm.collectionVariables.set()\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userPhoneNumber\": 1567892543,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Post create user with role with valid Url and endpoint and without  phonenumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//FirstName = TeamName_serialNumber\r",
											"var teamname = \"SwaggerSquad\";\r",
											"const serialnumber = Math.floor((Math.random()*100+1));\r",
											"const phonenumber = Math.floor(Math.random()*1000000000);\r",
											"pm.collectionVariables.set(\"teamname\",teamname);\r",
											"pm.collectionVariables.set(\"serialnumber\",serialnumber);\r",
											"pm.collectionVariables.set(\"phonenumber\",phonenumber);\r",
											"\r",
											"//pm.collectionVariables.set(\"RoleId\",pm.iterationData.get(\"Role-Id\"));\r",
											"//pm.collectionVariables.set()\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"});\r",
											"\r",
											"console.log(pm.response);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n\"userComments\": \"{{Comments}}\",\r\n\"userEduPg\": \"{{EDU PG}}\",\r\n\"userEduUg\": \"{{EDU UG}}\",\r\n\"userFirstName\": \"{{First-Name}}\",\r\n\"userId\": \"string\",\r\n\"userLastName\": \"{{Last-Name}}\",\r\n\"userLinkedinUrl\": \"{{LinkedinUrl}}\",\r\n\"userLocation\": \"string\",\r\n\"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{LoginEmail}}\"\r\n  },\r\n\r\n\"userMiddleName\": \"{{Middle-Name}}\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"{{Role-Id}}\",\r\n\"userRoleStatus\": \"{{Role-Status}}\"\r\n\r\n}\r\n],\r\n\"userTimeZone\": \"{{Time-Zone}}\",\r\n\"userVisaStatus\": \"{{Visa-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get Active User with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/activeUse",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"activeUse"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get Active User With invalid BaseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// const response = pm.response.json();\r",
											"// const statuscode =pm.response.code;\r",
											"\r",
											"// if (statuscode==400) {\r",
											"//     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"//         pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"//     });\r",
											"//  }\r",
											"// else {\r",
											"//      pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"//         pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"//     });\r",
											"// };\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalid_url}}/users/activeUsers",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"activeUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get Active User With invalid BaseURL and invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalid_url}}/users/activeUse",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"activeUse"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by invalid UserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/U10512",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"U10512"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by UserId as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/\"U892\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"\"U892\""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by UserId with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/U78@",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"U78@"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by UserId and users with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users$/U78",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users$",
										"U78"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by UserId and users as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/\"users\"/U78",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"\"users\"",
										"U78"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Get User information by UserId and invalid users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/use/U78",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"use",
										"U78"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets User by Program Batches with invalid batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programBatch/89935",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"89935"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets User by Program Batches with batchId as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programBatch/\"8448\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"\"8448\""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets User by Program Batches with batchId with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programBatch/8448@",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"8448@"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets User by Program Batches with batchId with alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programBatch/8448a",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"8448a"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users for Program by invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programs/16217",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programs",
										"16217"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users for Program by programId as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programs/\"16213\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programs",
										"\"16213\""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users for Program by programId with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programs/16213$",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programs",
										"16213$"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users for Program by programId with alphabet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/programs/16213a",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"programs",
										"16213a"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users by invalid roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/roles/R04",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roles",
										"R04"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users by roleId as string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/roles/\"R03\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roles",
										"\"R03\""
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Gets Users by roleId with special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status line is Not Found\", () => {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/roles/R02*",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roles",
										"R02*"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User  with invalid url",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==404) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/users/{{createduserId}}",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid Url valid endpoint without body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid url valid endpoint without firstname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid url valid endpoint without lastname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid url valid endpoint without phonenumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==404) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid url valid endpoint without visa status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User with valid url valid endpoint without timezone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-PUT-Update User  without mandetory fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404,405,500]);\r",
											"    });\r",
											" }\r",
											"else {\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201,202]);\r",
											"    });\r",
											"};\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"String\",\r\n  \"userEduPg\": \"String\",\r\n  \"userEduUg\": \"String\",\r\n  \r\n  \"userId\": \"{{userId}}\",\r\n  \r\n  \"userLinkedinUrl\": \"String\",\r\n  \"userLocation\": \"String\",\r\n \r\n  \"userPhoneNumber\": 0  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/{{createduserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User Role Status with invalidId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"{{Role-Id}}\",\r\n  \"userRoleStatus\": \"{{Role-Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleStatus/{{InvalidId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleStatus",
										"{{InvalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User RoleID with InvalidId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleList\": [\r\n    \"roleId\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleId/{{InvalidId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{InvalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Update User RoleID with existing userID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleList\": [\r\n    \"roleId\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleId/{{existinguserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{existinguserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Assign Update user role program batch status InvalidId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programId\":1 ,\r\n  \"roleId\": \"R01\",\r\n  \"userId\": \"2326\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 123,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleProgramBatchStatus/{{userId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Assign Update user role program batch status missing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.text();\r",
											"const statuscode =pm.response.code;\r",
											"\r",
											"\r",
											"if (statuscode==400) {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([400,404]);\r",
											"    });\r",
											" }\r",
											"else if(statuscode==404){\r",
											"     pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([404,405,500]);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is \"+statuscode+\" \"+pm.response.status,()=>{\r",
											"        pm.expect(statuscode).to.be.oneOf([200,201]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programId\":1 ,\r\n  \"roleId\": \"R01\",\r\n  \"userId\": \"\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 123,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/users/roleProgramBatchStatus/{{userId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete All Users using invalidUrl vaild end point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalid_url}}/users/{{createduserId}}",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"{{createduserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete all users with roles  with valid Url and invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/use/roles",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"use",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Delete all users with roles  with Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{invalid_url}}/users/roles",
									"host": [
										"{{invalid_url}}"
									],
									"path": [
										"users",
										"roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{TokenValue}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User Role Program Batch Map Controller",
					"item": [
						{
							"name": "NE-Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", ()=> {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Bad Request\", ()=> {\r",
											"    pm.response.to.be.badRequest;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap9*&^$",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap9*&^$"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Without Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Not Found\", function () {\r",
											"    pm.response.to.be.notFound;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}{{UserId}}",
									"host": [
										"{{baseurl}}{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var userId = \"U2824\";\r",
											"pm.collectionVariables.set(\"NE-UserId\",\"U72\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.message).to.contains(\"UserRoleProgramBatchMap not found with Id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/{{NE-UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"{{NE-UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Not Found\", ()=> {\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.error).to.eql(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap978/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap978",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Without Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Not Found\", function () {\r",
											"    pm.response.to.be.notFound;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}{{UserId}}",
									"host": [
										"{{baseurl}}{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", ()=> {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.error).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/deleteAll#$%/{{UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"deleteAll"
									],
									"hash": "$%/{{UserId}}"
								}
							},
							"response": []
						},
						{
							"name": "NE-Invalid UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//var userId = \"U2824\";\r",
											"pm.collectionVariables.set(\"NE-UserId\",\"U72\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", ()=> {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.message).to.contains(\"UserRoleProgramBatchMap not found with id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/deleteAll/{{NE-UserId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"deleteAll",
										"{{NE-UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "NE-Without UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", ()=> {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error Message\", ()=> {\r",
											"    const Msg = pm.response.json();\r",
											"    pm.expect(Msg.error).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenValue}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/userRoleProgramBatchMap/deleteAll/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"userRoleProgramBatchMap",
										"deleteAll",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Without Authorization",
			"item": [
				{
					"name": "Post create user with role no Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Not Found\", () => {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseurl}} /users/roleStatus",
							"host": [
								"{{baseurl}} "
							],
							"path": [
								"users",
								"roleStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT-Update User by user Id without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n  \"userComments\": \"string\",\r\n  \"userEduPg\": \"string\",\r\n  \"userEduUg\": \"string\",\r\n  \"userFirstName\": \"{{FirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{$randomLastName}}\",\r\n  \"userLinkedinUrl\": \"string\",\r\n  \"userLocation\": \"string\",\r\n  \"userLoginEmail\": \"string\",\r\n  \"userMiddleName\": \"string\",\r\n  \"userPhoneNumber\": 0,\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H1B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/{{createduserId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"{{createduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MC-AllUsers-Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/userRoleProgramBatchMap",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				},
				{
					"name": "MC-ByUserId-Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/userRoleProgramBatchMap/{{createduserId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{createduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MC-ByUserId-Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/userRoleProgramBatchMap/deleteAll/{{createduserId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{createduserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Active User-without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Not Found\", () => {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}users/activeUsers",
							"host": [
								"{{baseurl}}users"
							],
							"path": [
								"activeUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "User logout-Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutlms",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Batch with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Batches without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update by Batch Id with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{BatchId}},\r\n  \"batchName\": \"{{BatchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{ProgramId}},\r\n  \"programName\":\"{{ProgramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/batches",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by BatchId with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/batches/{batchId}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"batches",
								"{batchId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NE-Create Program Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"programDescription\": \"{{programDescription}}\",\r\n    \"programName\": \"{{programName}}\",\r\n    \"programStatus\":\"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/saveprogram",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"saveprogram"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all Programs details without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/allPrograms",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all Programs details with Users Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/allProgramsWithUsers",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"allProgramsWithUsers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Program by valid Program-Id Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/programs/{programId}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"programs",
								"{programId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program by Program name Without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{ProgramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/program/{programName}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"program",
								"{programName}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program with valid Program-Id Without Authorization Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/deletebyprogid/{{ProgramId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deletebyprogid",
								"{{ProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program by ProgramName Without Authorization Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is Unauthorized\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/deletebyprogname/{{ProgramName}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"deletebyprogname",
								"{{ProgramName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "User log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is OK\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenValue}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutlms",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "Numpyninja@1",
				"type": "string"
			},
			{
				"key": "username",
				"value": "sdetorganizers@gmail.com",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "teamname",
			"value": ""
		},
		{
			"key": "programNameIn",
			"value": ""
		},
		{
			"key": "serialnumber",
			"value": ""
		},
		{
			"key": "ProgramName",
			"value": ""
		},
		{
			"key": "Batch",
			"value": ""
		},
		{
			"key": "BatchName",
			"value": ""
		},
		{
			"key": "batch_desc",
			"value": ""
		},
		{
			"key": "Batch_NOofClasses",
			"value": ""
		},
		{
			"key": "phonenumber",
			"value": ""
		},
		{
			"key": "FirstName",
			"value": ""
		},
		{
			"key": "UserId",
			"value": ""
		},
		{
			"key": "NE-UserId",
			"value": ""
		},
		{
			"key": "baseurl",
			"value": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms"
		}
	]
}